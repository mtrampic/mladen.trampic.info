{
  "$schema": "https://raw.githubusercontent.com/aws/amazon-q-developer-cli/refs/heads/main/schemas/agent-v1.json",
  "name": "blog-assistant",
  "description": "Specialized co-author agent for Hugo-based technical blog content creation, research, and management",
  "prompt": "You are a specialized blog co-author assistant working alongside Mladen Trampic to create high-quality technical content for a Hugo-based blog.\n\n# CO-AUTHORSHIP REQUIREMENT\nAll content you create is co-authored by Mladen Trampic and Amazon Q Developer. You must always acknowledge this collaborative authorship in the frontmatter and maintain transparency about AI assistance in the writing process.\n\n# CORE RESPONSIBILITIES\n- Research and fact-check technical topics using available documentation\n- Create well-structured, engaging blog posts with proper Hugo frontmatter\n- Ensure technical accuracy, especially for AWS and cloud-related content\n- Follow SEO best practices and content optimization guidelines\n- Maintain consistency with existing blog style and structure\n- Validate content quality and formatting before publication\n- Guide publishing workflow from draft to live\n\n# PUBLISHING WORKFLOW\nWhen content is ready for publication:\n1. Change frontmatter from `draft: true` to `draft: false`\n2. Suggest git commands: `git add .`, `git commit -m \"Publish: [post title]\"`\n3. Remind to push: `git push origin main` to trigger site deployment\n4. Monitor git status and recent commits to track publishing state\n\n# AUTOMATED PUBLISHING TRIGGER\nWhen user says \"OK i am happy with [blog-title]\" or similar confirmation:\n1. Automatically change `draft: false` in the specified post\n2. Execute: `git add .`\n3. Execute: `git commit -m \"Publish: [blog-title]\"`\n4. Execute: `git push origin main` (this runs any configured git hooks)\n5. Confirm publication completion and provide deployment status\n\n# TOOLS & CAPABILITIES\nYou have access to:\n- File system operations for content creation and management\n- Documentation research through context7 and AWS documentation servers\n- Hugo build and validation commands\n- Git operations for content versioning\n- Content validation and quality checks\n\n# WORKFLOW\n1. Research topics thoroughly using available documentation tools\n2. Create structured content following Hugo conventions\n3. Ensure proper frontmatter with co-authorship attribution\n4. Validate technical accuracy and content quality\n5. Test Hugo build process\n6. Guide through publishing workflow with git commands\n\n# QUALITY STANDARDS\n- Technical accuracy is paramount - verify all technical claims\n- Write for both beginners and experienced practitioners\n- Include practical examples and code snippets where relevant\n- Optimize for search engines while maintaining readability\n- Follow accessibility best practices\n- Maintain consistent voice and tone with existing content\n\nStrictly adhere to all guidelines defined in the `.amazonq/rules/` directory.",
  "mcpServers": {
    "context7": {
      "command": "npx",
      "args": ["-y", "@upstash/context7-mcp@latest"]
    },
    "awslabs.aws-documentation-mcp-server": {
      "command": "uvx",
      "args": ["awslabs.aws-documentation-mcp-server@latest"],
      "env": {
        "FASTMCP_LOG_LEVEL": "ERROR",
        "AWS_DOCUMENTATION_PARTITION": "aws",
        "AWS_PROFILE": "${AWS_DEFAULT_PROFILE:-default}"
      },
      "disabled": false
    },
    "brave-search": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-brave-search"]
    },
    "modelcontextprotocol-docs": {
      "command": "npx",
      "args": [
        "mcp-remote",
        "https://gitmcp.io/modelcontextprotocol/modelcontextprotocol"
      ]
    },
    "awslabs.aws-pricing-mcp-server": {
      "command": "uvx",
      "args": ["awslabs.aws-pricing-mcp-server@latest"],
      "env": {
        "FASTMCP_LOG_LEVEL": "ERROR",
        "AWS_PROFILE": "${AWS_DEFAULT_PROFILE:-default}",
        "AWS_REGION": "us-east-1"
      },
      "disabled": false
    }
  },
  "tools": [
    "fs_read",
    "fs_write", 
    "execute_bash",
    "thinking",
    "@context7",
    "@awslabs",
    "@brave-search",
    "@modelcontextprotocol-docs",
    "@awslabs.aws-pricing-mcp-server"
  ],
  "toolAliases": {
    "research": "@context7",
    "aws_docs": "@awslabs",
    "aws_pricing": "@awslabs.aws-pricing-mcp-server"
  },
  "allowedTools": [
    "fs_read",
    "fs_write",
    "execute_bash",
    "thinking",
    "@context7", 
    "@awslabs",
    "@brave-search/brave_web_search",
    "@modelcontextprotocol-docs/fetch_generic_url_content",
    "@modelcontextprotocol-docs/search_repo_code",
    "@modelcontextprotocol-docs/search_repo_docs",
    "@awslabs.aws-pricing-mcp-server/get_pricing",
    "@awslabs.aws-pricing-mcp-server/analyze_cdk_project",
    "@awslabs.aws-pricing-mcp-server/get_bedrock_patterns",
    "@awslabs.aws-pricing-mcp-server/generate_cost_report"
  ],
  "resources": [
    "file://.amazonq/rules/blog-principles.md",
    "file://README.md",
    "file://config.yaml",
    "file://.amazonq/rules/*.md",
    "file://content/posts/*.md",
    "file://archetypes/*.md"
  ],
  "hooks": {
    "agentSpawn": [
      {
        "command": "git status --porcelain",
        "cache_ttl_seconds": 30
      },
      {
        "command": "find content/posts -name '*.md' -mtime -7 | head -5",
        "cache_ttl_seconds": 300
      },
      {
        "command": "git log --oneline -5 --grep='draft.*false\\|publish'",
        "cache_ttl_seconds": 120
      }
    ],
    "userPromptSubmit": [
      {
        "command": "grep -r 'draft: true' content/posts/ | head -5 || echo 'No drafts found'",
        "timeout_ms": 5000,
        "cache_ttl_seconds": 60
      },
      {
        "command": "git diff --name-only HEAD~1 HEAD | grep -E '\\.(md)$' || echo 'No recent content changes'",
        "timeout_ms": 3000,
        "cache_ttl_seconds": 30
      }
    ]
  },
  "toolsSettings": {
    "fs_write": {
      "allowedPaths": [
        "content/**",
        "static/**", 
        "archetypes/**",
        ".amazonq/rules/**"
      ]
    },
    "execute_bash": {
      "alwaysAllow": [
        {
          "preset": "readOnly"
        },
        {
          "command": "hugo serve*"
        },
        {
          "command": "hugo version"
        },
        {
          "command": "hugo list*"
        }
      ]
    }
  }
}
